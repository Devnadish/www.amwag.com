generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Supplier Model
model Supplier {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    // Name of the supplier (e.g., "Water Supplier Co.")
  logo      String?   // Logo URL for branding (optional)
  publicId  String?   // Public ID of the image in Cloudinary (optional)
  email     String    // Contact email for the supplier
  phone     String    // Contact phone number for the supplier
  address   String    // Physical address of the supplier
  products  Product[] // Explicit many-to-many relationship
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Product Model
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  size        String?
  imageUrl    String?
  publicId  String?   // Public ID of the image in Cloudinary (optional)
  supplierId  String   @db.ObjectId
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  published   Boolean  @default(false) // Add this field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Order Model
model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String      @db.ObjectId // Link to User (one-to-many)
  driverId    String?     @db.ObjectId // Link to Driver (optional)
  status      String      @default("Pending") // Order status (e.g., Pending, Delivered)
  items       OrderItem[] // Relational field for order items
  customer    User        @relation(fields: [customerId], references: [id]) // Link to Customer
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Order Item Model
model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId // Link to Order
  productId  String   @db.ObjectId // Link to Product
  quantity   Int      // Quantity of the product in the order
  order      Order    @relation(fields: [orderId], references: [id]) // Explicit relationship
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// User Model (Customers)
model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   // Name of the customer
  email    String   @unique // Email of the customer
  password String   // Password for authentication
  role     String   @default("customer") // "customer" or "admin"
  orders   Order[]  // Orders placed by the customer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Driver Model
model Driver {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // Name of the driver
  email     String   // Email of the driver
  phone     String   // Phone number of the driver
  imageUrl  String?  // URL for the driver's profile picture or vehicle image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// LocationHistory Model
model LocationHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  driverId   String   @db.ObjectId // Link to Driver
  latitude   Float    // Latitude of the location
  longitude  Float    // Longitude of the location
  timestamp  DateTime @default(now()) // Timestamp of the location update
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Promotion Model
model Promotion {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    // Title of the promotion (e.g., "Summer Sale")
  description String    // Description of the promotion
  startDate   DateTime  // Start date of the promotion
  endDate     DateTime  // End date of the promotion
  discount    Float     // Discount percentage (e.g., 20 for 20%)
  active      Boolean   @default(true) // Whether the promotion is active
  productIds  String[]  @db.ObjectId // Links to Products (many-to-many)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}