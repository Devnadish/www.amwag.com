generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Supplier Model
model Supplier {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    // Name of the supplier (e.g., "Water Supplier Co.")
  logo      String?   // Logo URL for branding (optional)
  publicId  String?   // Public ID of the image in Cloudinary (optional)
  email     String    // Contact email for the supplier
  phone     String    // Contact phone number for the supplier
  address   String    // Physical address of the supplier
  products  Product[] // Explicit many-to-many relationship
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Product Model
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  size        String?
  imageUrl    String?
  publicId  String?   // Public ID of the image in Cloudinary (optional)
  supplierId  String   @db.ObjectId
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  published   Boolean  @default(false) // Add this field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId // Explicitly define as ObjectId
  name     String
  email    String   @unique
  password String
  role     String
  orders   Order[]  // List of orders associated with the user
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // Explicitly define as ObjectId
  orderNumber String   @unique
  customerId  String   @db.ObjectId // Reference to the user who placed the order
  customer    User     @relation(fields: [customerId], references: [id]) // Relation to the User model
  customerName String?
  driverId    String?
  status      String
  amount      Float    // Total amount of the order
  items       OrderItem[]
 shiftId     String   @db.ObjectId // Ensure this matches Shift.id's native type
  shift       Shift    @relation(fields: [shiftId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // Explicitly define as ObjectId
  orderId    String   @db.ObjectId // Ensure this matches the type of Order.id
  productId  String   // Product ID
  quantity   Int      // Quantity of the product
  price      Float    // Historical price of the product at the time of purchase
  order      Order    @relation(fields: [orderId], references: [id])
}

// Driver Model
model Driver {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // Name of the driver
  email     String   // Email of the driver
  phone     String   // Phone number of the driver
  imageUrl  String?  // URL for the driver's profile picture or vehicle image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// LocationHistory Model
model LocationHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  driverId   String   @db.ObjectId // Link to Driver
  latitude   Float    // Latitude of the location
  longitude  Float    // Longitude of the location
  timestamp  DateTime @default(now()) // Timestamp of the location update
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Promotion Model
model Promotion {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    // Title of the promotion (e.g., "Summer Sale")
  description String    // Description of the promotion
  startDate   DateTime  // Start date of the promotion
  endDate     DateTime  // End date of the promotion
  discount    Float     // Discount percentage (e.g., 20 for 20%)
  active      Boolean   @default(true) // Whether the promotion is active
  productIds  String[]  @db.ObjectId // Links to Products (many-to-many)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Counter {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  key     String @unique // A unique key to identify the counter (e.g., "order_counter")
  counter Int    @default(0)
}
 

model Shift {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String   // "Day" or "Night"
  startTime   String   // Start time in 24-hour format (e.g., "06:00")
  endTime     String   // End time in 24-hour format (e.g., "18:00")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orders      Order[]   // An order belongs to a specific shift
}

model Company {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  fullName      String   @default("") // Full name of the company owner/contact person
  email         String   @default("") // Email address
  phoneNumber   String   @default("") // Phone number
  profilePicture String  @default("") // Profile picture URL
  bio           String   @default("") // Bio/description
  taxNumber     String   @default("") // Tax number
  taxQrImage    String   @default("") // URL of the tax QR image
  twitter       String   @default("") // Twitter URL
  linkedin      String   @default("") // LinkedIn URL
  instagram     String   @default("") // Instagram URL
  tiktok        String   @default("") // TikTok URL
  facebook      String   @default("") // Facebook URL
  snapchat      String   @default("") // Snapchat URL
  website       String   @default("") // Website URL
  address       String   @default("") // Address of the company
  latitude      String   @default("") // Latitude of the company location
  longitude     String   @default("") // Longitude of the company location
  createdAt     DateTime @default(now()) // Timestamp of creation
  updatedAt     DateTime @updatedAt // Timestamp of last update
}

 model NewLetter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
 }
model ContactSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  replies   Reply[] // One-to-many relationship: one submission can have multiple replies
}

model Reply {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  content             String   // The reply message
  sentAt              DateTime @default(now()) // Timestamp for when the reply was sent
  contactSubmissionId String   @db.ObjectId // Ensure this matches the native type of ContactSubmission.id
  contactSubmission   ContactSubmission @relation(fields: [contactSubmissionId], references: [id])
}